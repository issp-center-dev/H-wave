==================
チュートリアル
==================

H-waveを乱雑位相近似モード(RPA)で実行するには、入力ファイルとして

1. 環境設定入力ファイル
2. 相互作用定義ファイル

を用意した後、プログラムを実行します。
以下では、 ``docs/tutorial/Hubbard/RPA`` ディレクトリにあるサンプルを例にチュートリアルを実施します。
相互作用定義ファイルは StdFace ライブラリを用いて生成することもできます。詳細は :ref:`Ch:StdFace` の章をご覧ください。

環境設定入力ファイルの作成
--------------------------------

環境設定入力ファイルには、基本パラメータの指定と入出力を制御する情報を記述します。
``docs/tutorial/Hubbard/RPA`` ディレクトリ内に ``input.toml`` というファイルがありますが、これが入力パラメータファイルになります。
以下、ファイルの内容を記載します。

.. literalinclude:: ../sample/input.toml

このファイルはTOML形式で記述され、内容ごとにセクションに分類されています。

``[log]`` セクション
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

ログ出力に関する設定を行います。
``print_level`` で標準出力のレベルを指定します。

``[mode]`` セクション
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

実行モードに関する設定および基本パラメータの指定を行います。
``mode`` で乱雑位相近似(``RPA``)を選択します。
``[mode.param]`` サブセクションには計算実行時のパラメータを指定します。

``[file]`` セクション
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``[file.input]`` サブセクションでは、入力ファイルを格納するディレクトリ ``path_to_input`` を指定します。
以前に計算した既約感受率 :math:`\chi_0(\vec{q})` のデータを ``chi0q_init`` に指定したファイルから読み込んで感受率の計算を行うことができます。
``[file.input.interaction]`` サブセクションには、幾何情報および相互作用定義を格納するファイルのファイル名を相互作用のタイプごとに列挙します。

``[file.output]`` サブセクションには、
既約感受率 :math:`\chi_0(\vec{q})` を出力するファイル名 ``chi0q`` 、
感受率 :math:`\chi(\vec{q})` を出力するファイル名 ``chiq`` を指定します。
これらのキーワードがない場合にはその項目は出力されません。

詳細については :ref:`ファイルフォーマット<Ch:Config_rpa>` の章をご覧ください。


相互作用定義ファイルの作成
----------------------------------------

Hamiltonianを構築するための格子の幾何情報および相互作用係数を格納したデータファイルを作成します。
項目とファイル名の対応付けは、入力パラメータファイルの ``[file.input.interaction]`` セクションで行います。

``Geometry``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

格子の幾何情報を記述します。ファイル例を以下に示します。

.. literalinclude:: ../sample/geom.dat

基本ベクトル(1〜3行目)、軌道の数(4行目)、各軌道のWannier center(5行目以降)を記載します。

``Transfer``, ``CoulombIntra``, ``CoulombInter``, ``Hund``, etc
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Transferに指定するファイルは、電子系のTransferに相当するHamiltonianの係数を格納します。
また、二体相互作用の係数は相互作用のタイプごとに係数を格納するファイルを指定します。

相互作用のタイプは、実空間版および波数空間版UHFの入力ファイル形式と対応して、CoulombItra, CoulombInter, Hund, Ising, Exchange, PairLift, PairHop が定義されています。

これらのファイルはWannier90(-like)形式で記述されます。以下に例を示します。

.. literalinclude:: ../sample/transfer.dat

コメント行(1行目)、軌道の数(2行目)、 ``nrpts`` (3行目)、縮重度 ( ``nrpts`` 個を1行あたり15個ずつ)、係数行列の要素を記載します。
``nrpts`` は、相互作用定義の並進ベクトルのx,y,z軸に沿った上限と下限から作られる直方体について、それに含まれるセルの総数です。

行列要素の各行は、並進ベクトル :math:`r_x, r_y, r_z` 、軌道のインデックス :math:`\alpha, \beta` 、係数の値の実部・虚部です。

   
計算の実行
----------------------------------------

全ての入力ファイルが準備できた後、プログラムを実行して計算を行います。
入力パラメータファイル(ここでは ``input.toml`` )を引数とし、ターミナルからH-waveを実行します。

.. code-block:: bash

    $ hwave input.toml

計算が開始されると以下のようなログが出力されます。

.. literalinclude:: ../sample/runlog.dat

入力ファイル読み込みに関するログが出力されたあと、乱雑位相近似計算の計算過程に関する情報が出力されます。
出力ファイルは ``input.toml`` の ``[file.output]`` セクションの指定に従い、
``output`` ディレクトリに ``chi0q.npz`` , ``chiq.npz`` ファイルが出力されます。

出力ファイルの詳細については :ref:`ファイルフォーマット<Sec:outputfile_rpa>` の章をご覧ください。

計算のポスト処理として、計算結果を可視化するためのツールが ``sample/RPA/view.py`` に用意されています。
このスクリプトファイルを現在のディレクトリにコピーし、ターミナルから以下を実行します。
このツールを実行するには ``matplotlib`` パッケージが必要です。

.. code-block:: bash

    $ python3 view.py

``output/chi0q.npz`` と ``output/chiq.npz`` を読み込み、松原振動数 :math:`{\rm i}\omega_m=0` での電荷感受率 :math:`\chi_c(\vec{q})` およびスピン感受率 :math:`\chi_s(\vec{q})` の値を各 :math:`\vec{q}` ごとに標準出力に書き出します。あわせて、これらの値を3Dプロットした以下の図を PNG 形式で出力します。

.. tabularcolumns:: CC

.. raw:: latex

	 \begingroup
	 \renewcommand{\hline}{}

.. list-table::

  * - .. figure:: ../sample/chic.png

         :math:`\chi_c(\vec{q})`

    - .. figure:: ../sample/chis.png

         :math:`\chi_s(\vec{q})`

.. raw:: latex

	 \endgroup



